#!/usr/bin/env python3
import sys
import os
import re
import string
import fitz  # PyMuPDF
from habanero import Crossref

# limiting filenames to valid character
def remove_invalid_characters(text):
    valid_characters = "-_.() %s%s" % (string.ascii_letters, string.digits)
    cleaned_text = ''.join(c for c in text if c in valid_characters)
    return cleaned_text

# truncating to lmit the file name for system to manage
def truncate_filename(filename, max_length):
    if len(filename) <= max_length:
        return filename
    else:
        # Truncate and add a unique identifier to ensure uniqueness
        base_name, extension = os.path.splitext(filename)
        truncated_name = base_name[:max_length - len(extension) - 5]  # Leave room for "_x.pdf"
        return f"{truncated_name}_{os.urandom(2).hex()}{extension}"

# opening pdf file, reading the first page and extracting DOI with a very common pattern
def extract_metadata_from_pdf(pdf_file):
    try:
        # Open the PDF file using PyMuPDF
        pdf_document = fitz.open(pdf_file)
        
        # Extract text from the first page
        first_page = pdf_document[0]
        text = first_page.get_text("text")

        # Use your DOI regex pattern here
        doi_pattern = r'10[.][\d.]{1,15}\/[-._;:()\/A-Za-z0-9<>]+[A-Za-z0-9]'

        doi_match = re.search(doi_pattern, text)
        if doi_match:
            doi = doi_match.group()
            print ("Extracting DOI from file")
            return fetch_metadata_by_doi(doi)
        else:
            return None
    except Exception as e:
        return str(e)

#using crossref API to match the extracted DOI
def fetch_metadata_by_doi(doi):
    try:
        cr = Crossref()
        metadata = cr.works(doi)
        print ("Extracting metadata through crossref.org")
        return metadata
    except Exception as e:
        return str(e)

# extracting family name for the authors, if there is one author only first author family name is extracted
# if two author, both family name are extracted and save with 'and' and in case of more author first author family name, et al. is used
def format_author_names(authors):
    if len(authors) == 1:
        return authors[0]['family']
    elif len(authors) == 2:
        return f"{authors[0]['family']} and {authors[1]['family']}"
    else:
        return f"{authors[0]['family']} et al."

# saving required information from the metadata to the file and removing the invalid characters are performed here
# all the filename are limited to allow for only valid character and with maximum character of 128 can be changed to longer
def rename_pdf_file(pdf_file, metadata):
    try:
        authors = metadata['message']['author']
        author_names = format_author_names(authors)
        title = metadata['message']['title'][0]
        year = metadata['message']['issued']['date-parts'][0][0]
        publication = metadata['message']['container-title'][0] if 'container-title' in metadata['message'] else 'Unknown publication'
        
        # Create a valid filename
        cleaned_authornames = remove_invalid_characters(author_names)
        cleaned_title = remove_invalid_characters(title)
        cleaned_year = remove_invalid_characters(str(year))
        cleaned_publication = remove_invalid_characters(publication)

        # Build the new filename
        new_filename = f"{cleaned_authornames} ({cleaned_year}) {cleaned_title} @ {cleaned_publication}.pdf"

        # Limit the filename to 128 characters
        new_filename = truncate_filename(new_filename, 128)

        # Rename the file
        os.rename(pdf_file, os.path.join(os.path.dirname(pdf_file), new_filename))
        return new_filename
    except Exception as e:
        return str(e)

# in case directory or pdf path are provided, the following processes are executed to select files before extractions are performed
def process_folder_or_file(path):
    if os.path.isdir(path):
        process_folder(path)
    elif os.path.isfile(path) and path.lower().endswith('.pdf'):
        pdf_file = path
        metadata = extract_metadata_from_pdf(pdf_file)

        if metadata:
            new_file_name = rename_pdf_file(pdf_file, metadata)
            print(f"File renamed to: {new_file_name}")
        else:
            print(f"DOI not found in {pdf_file}.")
    else:
        print("Invalid input. Please provide a valid folder path or PDF file path.")

# focused on opening the folder and extracting individual files from the folder to perform the renaming
def process_folder(folder_path):
    for root, _, files in os.walk(folder_path):
        for file in files:
            if file.endswith(".pdf"):
                pdf_file = os.path.join(root, file)
                metadata = extract_metadata_from_pdf(pdf_file)

                if metadata:
                    new_file_name = rename_pdf_file(pdf_file, metadata)
                    print(f"File renamed to: {new_file_name}")
                else:
                    print(f"DOI not found in {pdf_file}.")

# main code which helps to take two argument when running the program
if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python rename_pdf_by_metadata.py <FOLDER_PATH_OR_PDF_FILE_PATH>")
        sys.exit(1)

    path = sys.argv[1]
    process_folder_or_file(path)
